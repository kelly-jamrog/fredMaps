library(fredMaps)
state_names(1)
state_names("jel")
library(fredMaps)
state_names("jel")
state_names(1000)
state_names(1000)
state_names("potato")
!(toupper("potatoe") %in% state.abb)
!(toupper("potatoe") %in% toupper(state.name))
(!(toupper("state") %in% state.abb) & !(toupper("state") %in% toupper(state.name)))
library(fredMaps)
state_names("hi")
state_names("hio")
state_names(1)
library(fredMaps)
state_names(1)
state_names("potato")
library(fredMaps)
state_names("hiodsfl")
state_names("texas")
state_names("texas", abb = TRUE)
library(fredMaps)
state_names("tx")
library(fredMaps)
state_names("tx")
state_names(1)
state_names("kelly")
library(fredMaps)
state_names("kelly")
state_names(c("tx", "dc", "ca"))
library(fredMaps)
state_names(c("tx", "dc", "ca"))
state_names(c("tx", "dc", "ca"), replace.na = TRUE)
library(fredMaps)
example(state_names)
library(fredMaps)
example(state_names)
library(fredMaps)
example(state_names)
state_names(c("tx", "dc", "ca"))
library(devtools)
spell_check()
library(fredMaps)
example(state_names)
merge_on_state <- function(df1, col1, df2, col2, merge = "left") {
library(dplyr)
col1 <- enquo(col1)
col2 <- enquo(col2)
df1 <- mutate(df1, XXXstateXXX = state_names(!!col1))
print(names((df1)))
df2 <- mutate(df2, XXXstateXXX = state_names(!!col2))
print(names((df2)))
# merged_data <- merge(df1, df2, by = "XXXstateXXX", all = TRUE)
merged_data <- df1 %>%
left_join(df2, by = "XXXstateXXX") %>%
dplyr::select(-c("XXXstateXXX"))
return(merged_data)
}
library(fredMaps)
example("proper_case")
library(fredMaps)
setwd("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/Assignments /fredMaps")
obese <- read.csv("obese.csv", stringsAsFactors = FALSE)
bingedrinking <- read.csv("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/Assignments /fredMaps/bingedrinking.csv",
stringsAsFactors = FALSE)
bingedrinking <- filter(bingedrinking, Group != "Overall")
gdp <- read.csv("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/Assignments /fredMaps/state gdp per capita.csv",
stringsAsFactors = FALSE)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
is.data.frame(mtcars)
class(mtcars)
library(fredMaps)
merge_on_state(cat, potato, dog, mouse)
library(fredMaps)
merge_on_state(cat, dog, potato, mouse)
merge_on_state(mtcars, dog, potato, mouse)
merge_on_state(mtcars, dog, 1, mouse)
state_names("tx", tolower = "y")
state_names("tx")
state_names("tx", tolower = "potato")
library(fredMaps)
state_names("tx", tolower = "potato")
state_names("tx", tolower = "y")
mean
UseMethod(mean)
library(fredMaps)
merge_on_state(mtcars, cyl, mtcars, mpg, merge = "down")
mtcars
library(fredMaps)
merge_on_state(mtcars, cyl, mtcars, mpg, merge = "down")
merge_on_state(mtcars, dog, mtcars, mpg, merge = "down")
library(fredMaps)
merge_on_state(mtcars, cyl, mtcars, mpg, merge = "down")
merge_on_state(mtcars, cyl, mtcars, mpg, merge = "down")
setwd("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/Assignments /fredMaps")
obese <- read.csv("obese.csv", stringsAsFactors = FALSE)
bingedrinking <- read.csv("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/Assignments /fredMaps/bingedrinking.csv",
stringsAsFactors = FALSE)
bingedrinking <- filter(bingedrinking, Group != "Overall")
gdp <- read.csv("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/Assignments /fredMaps/state gdp per capita.csv",
stringsAsFactors = FALSE)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
names(df1)
names(bingedrinking)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
merge_on_state(bingedrinking, potato, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, potato, gdp, X)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
merge_on_state(bingedrinking, potato, gdp, X)
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
merge_on_state(bingedrinking, LocationAbbr, gdp, location)
merge_on_state(bingedrinking, LocationAbbr, gdp, X, merge = "right")
merge_on_state(bingedrinking, LocationAbbr, gdp, X, merge = "inner")
library(fredMaps)
? gdp
library(fredMaps)
? gdp
example("proper_case")
example("state_names")
library(fredMaps)
load(bingedrinking)
load(gdp)
View(gdp)
load
data("bingedrinking")
library(fredMaps)
example("merge_on_state")
library(fredMaps)
example("merge_on_state")
library(fredMaps)
example("merge_on_state")
View(gdp)
? gdp
library(fredMaps)
? gdp
merge_on_state(bingedrinking, LocationAbbr, gdp, X)
x <- merge_on_state(bingedrinking, LocationAbbr, gdp, X)
class(X)
class(x)
? enqup
? enquo
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X, merge = "left")
library(fredMaps)
merge_on_state(bingedrinking, LocationAbbr, gdp, X, merge = "left")
library(fredMaps)
example("state_names")
shapeToDF
shapeToDF <- function(dir, file) {
library(rgdal)
library(maptools)
library(ggplot2)
library(gpclib)
library(plyr)
suppressWarnings(gpclibPermit())
if(length(dir(dir)) == 0) {stop(paste0("Directory '", dir, "' does not exist"))}
map <- readOGR(dir, file)
if(class(map)[1] != "SpatialPolygonsDataFrame") {
stop(paste0("Output is class ", class(map),". Not a SpatialPolygonsDataFrame. Check input files."))}
#create an id
map@data$id <- rownames(map@data)
map.points <- fortify(map, region = "id")
map.df <- join(map.points, map@data, by = "id")
class(map.df) <- c("map.df", "data.frame")
return(map.df)
}
library(fredMaps)
? fortify
library(fredMaps)
library(fredMaps)
library(fredMaps)
library(fredMaps)
? gpclibPermit
library(fredMaps)
? shape_to_df
nynta <- shapeToDF("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
library(fredMaps)
nynta <- shapeToDF("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
shape_to_df("potato", "fat")
shape_to_df(("/Users/kellyjamrog/Downloads/nynta_18d/", "fat")
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "fat")
library(fredMaps)
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "fat")
shape_to_df("potato", "fat")
nynta <- shapeToDF("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
library(fredMaps)
shape_to_df("potato", "fat")
example("shape_to_df")
? shape_to_df
library(fredMaps)
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
library(fredMaps)
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
length(dir("/Users/kellyjamrog/Downloads/nynta_18d/"))
length(dir("potato"))
dir("potato")
library(fredMaps)
dir("potato")
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
library(fredMaps)
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
install.packages("limma")
library(fredMaps)
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
library(tools)
file_path_sans_ext("/Users/kellyjamrog/Downloads/nynta_18d/)
file_path_sans_ext("/Users/kellyjamrog/Downloads/nynta_18d/")
shape_to_mapf("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
shape_to_map("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
? geom_bar
? aes
library(fredMaps)
library(fredMaps)
nynta <- shape_to_df("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
df_to_map(nynta)
library(fredMaps)
df_to_map(nynta)
names(nynta)
df_to_map(nynta)
library(fredMaps)
df_to_map(nynta)
library(fredMaps)
? shape_to_df
library(fredMaps)
? shape_to_Df
? shape_to_df
? obese
library(fredMaps)
? obese
examples(obese)
example(obese)
library(fredMaps)
? obese
example(obese)
barplot(obese$Children)
plot(obese$Children)
cor(obese$AdultsObese, obese$Children)
library(fredMaps)
example(obese)
library(fredMaps)
? college_enrollment
example("college_enrollment")
library(fredMaps)
? fredMaps
library(fredMaps)
? fredMaps
example(fredMaps)
source('~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/fredMaps/R/fredMaps.R')
library(fredMaps)
example("fredMaps")
library(fredMaps)
example("fredMaps")
library(fredMaps)
example(fredMaps)
? fredMaps
library(fredMaps)
? fredMaps
library(fredMaps)
example(fredMaps)
library(fredMaps)
? fredMaps
? college_enrollment
? fredMaps
library(fredMaps)
? fredMaps
library(fredMaps)
? fredMaps
library(fredMaps)
? fredMaps
example(fredMaps)
college_enrollment
data("college_enrollment")
View(college_enrollment)
library(fredMaps)
example(fredMaps)
library(fredMaps)
example(fredMaps)
library(fredMaps)
example("fredMaps")
library(fredMaps)
example("fredMaps")
library(fredMaps)
example(fredMaps)
library(fredMaps)
example(fredMaps)
library(fredMaps)
? fredMapsDot
source('~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/fredMaps/R/fredMapsDot.R')
library(fredMaps)
library(fredMaps)
? fredMapsPoint
library(fredMaps)
? fredMapsPoint
library(fredMaps)
? fredMapsPoint
example("fredMapsPoint")
library(fredMaps)
example("fredMapsPoint")
library(fredMaps)
example("fredMapsPoint")
library(fredMaps)
example("fredMapsPoint")
library(fredMaps)
example("fredMapsPoint")
fredMapsPoint <- function(data, size_var, color_var, long, lat){
if (!is.data.frame(data))
stop("data must be a data.frame!")
if (!is.numeric(data[[deparse(substitute(long))]]) | !is.numeric(data[[deparse(substitute(lat))]]))
stop("latitudes and longitdues must be numeric!")
if (!is.numeric(data[[deparse(substitute(size_var))]]) & !is.integer(data[[deparse(substitute(size_var))]]))
stop("point size variable must be integer or numeric!")
size_var <- enquo(size_var)
long <- enquo(long)
lat <- enquo(lat)
all_states <- map_data("state")
if (is.numeric(data[[deparse(substitute(color_var))]]) & is.integer(data[[deparse(substitute(color_var))]])) { # if color var is continuous
color_var <- enquo(color_var)
ggplot()+
geom_map(data=all_states, aes(map_id=region),
map=all_states, fill="grey", color="black")+
expand_limits(x=all_states$long, y=all_states$lat)+
geom_point(data=data, aes(x=!!long, y=!!lat, size = !!size_var, col = !!color_var)) +
scale_fill_continuous(type = "gradient")
}
else { # if color var is discrete
color_var <- enquo(color_var)
ggplot()+
geom_map(data=all_states, aes(map_id=region),
map=all_states, fill="grey", color="black")+
expand_limits(x=all_states$long, y=all_states$lat)+
geom_point(data=data, aes(x=!!long, y=!!lat, size = !!size_var, col = !!color_var))
}
}
fredMapsPoint(college_enrollment, size=enrollment, color=undergrad, long=long, lat=lat)
libray(dplyr)
library(dplyr)
fredMapsPoint(college_enrollment, size=enrollment, color=undergrad, long=long, lat=lat)
library(maps)
fredMapsPoint(college_enrollment, size=enrollment, color=undergrad, long=long, lat=lat)
library(ggplot2)
fredMapsPoint(college_enrollment, size=enrollment, color=undergrad, long=long, lat=lat)
fredMapsPoint(college_enrollment, size=enrollment, color=label, long=long, lat=lat)
fredMapsPoint(college_enrollment, size=enrollment, color=label, long=long, lat=lat)
library(fredMaps)
example("fredMapsPoint")
library(fredMaps)
example("fredMapsPoint")
data("bingedrinking")
View(bingedrinking)
barplot(bingedrinking$BingeDrinking)
boxplot(BingeDrinking~Group,data=bingedrinking)
boxplot(BingeDrinking~Group,data=bingedrinking, main="Average Binge Drinking Prevalence by Group", xlab = "Group", ylab = "Percentage of Adults Binge Drinking")
boxplot(BingeDrinking~Group,data=bingedrinking, main="Average Binge Drinking Prevalence by Group",ylab = "Percentage of Adults Binge Drinking")
library(fredMaps)
?bingedrinking
library(fredMaps)
example("bingedrinking")
data(gdp)
View(gdp)
summary(gdp)
barplot(gdp$X~gdp$X)
boxplot(gdp$X~gdp$X)
boxplot(gdp$X)
boxplot(gdp$gdpPerCap)
library(fredMaps)
?gdp
example(gdp)
?proper_case
examples(proper_case)
example(proper_case)
?state_names
example(state_names)
library(fredMaps)
example(state_names)
?state_names
library(fredMaps)
?state_names
?merge_on_state
example("merge_on_state")
library(fredMaps)
example("merge_on_state")
?shape_to_df
library(fredMaps)
?shape_to_df
?shape_to_map
library(fredMaps)
?shape_to_map
?df_to_map
?ggplot
library(fredMaps)
? shapeToMap
library(fredMaps)
? dtToMap
library(fredMaps)
library(fredMaps)
? df_to_map
library(fredMaps)
library(fredMaps)
? dfToMap
state.abb
? state.abb
vignette()
browseVignettes()
library(fredMaps)
? shapeToDF
library(fredMaps)
example("mergeOnState")
library(fredMaps)
example("mergeOnState")
library(fredMaps)
example("stateNames")
example(properCase)
example("mergeOnState")
library(devtools)
use_vignette()
use_vignette("vignette")
browseVignettes()
? shapeToDF
shapeToMap("/Users/kellyjamrog/Downloads/nynta_18d/", "nynta")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/Wesleyan Year 4/QAC 358 - Advanced R/fredMaps/vignettes")
library(fredMaps)
ny <- shapeToDF("nynta_18d", "nynta")
dfToMap(ny, BoroName)
dfToMap(ny, fill = BoroName)
names(ny)
dfToMap(ny, fill = BoroCode)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
dfToMap(ny, fill = "BoroCode")
library(fredMaps)
View(ny)
dfToMap(ny, fill = BoroCode)
dfToMap(ny, fill = ny$BoroCode)
library(fredMaps)
dfToMap(ny, fill = ny$BoroCode)
library(fredMaps)
dfToMap(ny, fill = ny$BoroCode)
View(ny)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
timesquare <- data.frame(long = "40.7590",
lat = "73.9845")
View(timesquare)
dfToMap(ny, ny$BoroName) +
labs(title = "New York City", fill = "Borough") +
geom_point(data = timesquare, aes(x=long, y=lat),
color = 'blue', size = 4)
library(ggplot2)
dfToMap(ny, ny$BoroName) +
labs(title = "New York City", fill = "Borough") +
geom_point(data = timesquare, aes(x=long, y=lat),
color = 'blue', size = 4)
library(ggplot2)
timesquare <- data.frame(long = "40.7590",
lat = "73.9845")
dfToMap(ny, ny$BoroName) +
labs(title = "New York City", fill = "Borough") +
geom_point(data = timesquare, aes(x=long, y=lat))
timesquare <- data.frame(long = "40.7590",
lat = "73.9845")
dfToMap(ny, ny$BoroName) +
labs(title = "New York City", fill = "Borough") +
geom_point(data = timesquare, aes(x=long, y=lat))
library(fredMaps)
timesquare <- data.frame(long = "40.7590",
lat = "73.9845")
dfToMap(ny, ny$BoroName) +
labs(title = "New York City", fill = "Borough") +
geom_point(data = timesquare, aes(x=long, y=lat))
View(ny)
dfToMap(ny) +
+   labs(title = "New York City") +
+   geom_point(data = timesquare, aes(x=long, y=lat))
drinking_GDP <- mergeOnState(bingedrinking, LocationAbbr, gdp, X, merge = "inner")
View(drinking_GDP)
cor(drinking_GDP$BingeDrinking, drinking_GDP$gdpPerCap)
library(fredMaps)
library(fredMaps)
devtools::load_all(".")
